version: '3'

volumes:
  minio_data:
    driver: local

services:
  mock-api:
    build:
      context: ./mock-api
    ports:
      - 3000:3000
  kafka-ui:
    container_name: kafka-ui
    restart: always
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8084:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./config/dynamic_config.yaml:/etc/kafkaui/dynamic_config.yaml
  minio:
    image: docker.io/bitnami/minio:2024
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
      - MINIO_DEFAULT_BUCKETS=export-bucket
    ports:
      - '9000:9000'
      - '9001:9001'
#    volumes:
#      - 'minio_data:/bitnami/minio/data'

  init-minio:
      image: docker.io/bitnami/minio-client
      environment:
        - MINIO_SERVER_URL=http://minio:9000
        - MINIO_SERVER_HOST=minio
        - MINIO_SERVER_ACCESS_KEY=minio-root-user
        - MINIO_SERVER_SECRET_KEY=minio-root-password
      command:
        - bash
        - -c
        - |
          mc alias set myminio http://minio:9000 minio-root-user minio-root-password
          mc admin user add myminio "myuserserviceaccount" "myuserserviceaccountpassword"
          mc admin policy attach myminio readwrite --user=myuserserviceaccount
        #mc admin user svcacct add myminio myuserserviceaccount
  kafka:
    image: bitnami/kafka:3.6
    restart: always
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  init-kafka:
    image: bitnami/kafka:3.6
    depends_on:
      - kafka
    command:
      - bash
      - -c
      - |
        kafka-topics.sh --bootstrap-server kafka:9092 --list
        echo -e 'Creating kafka topics'
        kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic ria --replication-factor 1 --partitions 1
        echo -e 'Successfully created the following topics:'
        kafka-topics.sh --bootstrap-server kafka:9092 --list

  schema-registry:
    image: bitnami/schema-registry:7.5
    ports:
      - 8081:8081
    environment:
      - SCHEMA_REGISTRY_DEBUG=true
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
    depends_on:
      - kafka

  mongo:
    build: ./mongo
    ports:
      - 27017:27017

  db:
    image: postgres
    environment:
      POSTGRES_USER: ivan
      POSTGRES_PASSWORD: ivan123
    ports:
      - 5432:5432

  init-db:
    image: postgres
    depends_on:
      - db
    environment:
      PGUSER: ivan
      PGPASSWORD : ivan123
    volumes:
      - ./postgres/backup.sql:/docker-entrypoint-initdb.d/backup.sql
    command: >
      bash -c "
      until pg_isready -h db -U ivan; do
        echo 'Waiting for PostgreSQL to be ready...';
        sleep 2;
      done;
      psql -h db -U ivan -f /docker-entrypoint-initdb.d/backup.sql
      "

  adminer:
    image: adminer
    ports:
      - 8085:8080

  spring-web:
    build: ../spring-web
    ports:
      - 8080:8080
    depends_on:
      - db

  zio-producer:
    build: ../zio-producer
    ports:
      - 8083:8083
    depends_on:
      - kafka
      - schema-registry
    environment:
      - RIA_DOMAIN=http://mock-api:3000

  beam-consumer:
    build: ../beam-consumer
    deploy:
      resources:
        limits:
          cpus: "0.5"
    depends_on:
      - kafka
      - mongo
      - schema-registry

  scio-exporter:
    build: ../scio-exporter
    depends_on:
      - mongo

  spark-exporter:
    build: ../spark-exporter
    ports:
      - 8082:8082
    depends_on:
      - minio
      - mongo
